#!/bin/bash

# =============================================================================
# Script d'installation pour Inception of Things (IoT)
# Ce script configure automatiquement l'environnement pour le projet K3s
# =============================================================================

set -e  # Arr√™ter en cas d'erreur

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions utilitaires
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rification que le script est ex√©cut√© depuis le bon r√©pertoire
check_directory() {
    if [ ! -f "Vagrantfile" ] || [ ! -f "Makefile" ]; then
        log_error "Ce script doit √™tre ex√©cut√© depuis le r√©pertoire racine du projet (contenant Vagrantfile et Makefile)"
        exit 1
    fi
}

# V√©rification des pr√©requis syst√®me
check_system() {
    log_info "V√©rification du syst√®me..."

    # V√©rifier Ubuntu
    if ! command -v lsb_release >/dev/null 2>&1 || ! lsb_release -d | grep -q "Ubuntu"; then
        log_error "Ce script n√©cessite Ubuntu"
        exit 1
    fi

    # V√©rifier les droits sudo
    if ! sudo -n true 2>/dev/null; then
        log_warning "Droits sudo requis. Vous pourriez √™tre invit√© √† saisir votre mot de passe."
    fi

    log_success "Syst√®me compatible d√©tect√©"
}

# Installation de VirtualBox
install_virtualbox() {
    log_info "V√©rification et installation de VirtualBox..."

    if command -v VBoxManage >/dev/null 2>&1; then
        local version=$(VBoxManage --version)
        log_success "VirtualBox d√©j√† install√© (version: $version)"
        return 0
    fi

    log_info "Installation de VirtualBox..."
    sudo apt-get update >/dev/null 2>&1
    sudo apt-get install -y virtualbox virtualbox-ext-pack >/dev/null 2>&1

    # Ajouter l'utilisateur au groupe vboxusers
    sudo usermod -aG vboxusers $USER

    log_success "VirtualBox install√© avec succ√®s"
}

# Installation de Vagrant
install_vagrant() {
    log_info "V√©rification et installation de Vagrant..."

    if command -v vagrant >/dev/null 2>&1; then
        local version=$(vagrant --version)
        log_success "Vagrant d√©j√† install√© ($version)"
        return 0
    fi

    log_info "Installation de Vagrant..."

    # T√©l√©charger et installer Vagrant depuis le site officiel
    wget -O vagrant.deb https://releases.hashicorp.com/vagrant/2.4.1/vagrant_2.4.1-1_amd64.deb >/dev/null 2>&1
    sudo dpkg -i vagrant.deb >/dev/null 2>&1
    sudo apt-get install -f -y >/dev/null 2>&1  # R√©soudre les d√©pendances
    rm -f vagrant.deb

    log_success "Vagrant install√© avec succ√®s"
}

# Configuration de la virtualisation imbriqu√©e
setup_nested_virtualization() {
    log_info "Configuration de la virtualisation imbriqu√©e..."

    # V√©rifier si nous sommes dans une VM
    if systemd-detect-virt >/dev/null 2>&1; then
        log_warning "Virtualisation imbriqu√©e d√©tect√©e"

        # D√©charger les modules KVM s'ils sont charg√©s
        if lsmod | grep -q kvm; then
            log_info "D√©chargement des modules KVM pour √©viter les conflits..."
            sudo modprobe -r kvm_intel kvm 2>/dev/null || true
        fi

        # Blacklister KVM pour √©viter les conflits avec VirtualBox
        if [ ! -f /etc/modprobe.d/blacklist-kvm.conf ]; then
            log_info "Configuration du blacklist KVM..."
            echo "blacklist kvm" | sudo tee /etc/modprobe.d/blacklist-kvm.conf >/dev/null
            echo "blacklist kvm_intel" | sudo tee -a /etc/modprobe.d/blacklist-kvm.conf >/dev/null
            sudo update-initramfs -u >/dev/null 2>&1
        fi

        log_success "Virtualisation imbriqu√©e configur√©e"
    else
        log_success "Environnement de virtualisation standard d√©tect√©"
    fi
}

# Installation des outils suppl√©mentaires
install_tools() {
    log_info "Installation des outils suppl√©mentaires..."

    sudo apt-get update >/dev/null 2>&1
    sudo apt-get install -y \
        curl \
        wget \
        net-tools \
        make \
        git \
        vim \
        htop \
        tree >/dev/null 2>&1

    log_success "Outils suppl√©mentaires install√©s"
}

# Pr√©paration des r√©pertoires
setup_directories() {
    log_info "Pr√©paration des r√©pertoires..."

    # Cr√©er le r√©pertoire confs s'il n'existe pas
    mkdir -p confs
    chmod 755 confs

    # Rendre les scripts ex√©cutables
    if [ -d scripts ]; then
        chmod +x scripts/*.sh
    fi

    log_success "R√©pertoires pr√©par√©s"
}

# Test de la configuration
test_configuration() {
    log_info "Test de la configuration..."

    # V√©rifier VirtualBox
    if ! VBoxManage list vms >/dev/null 2>&1; then
        log_error "VirtualBox ne fonctionne pas correctement"
        return 1
    fi

    # V√©rifier Vagrant
    if ! vagrant version >/dev/null 2>&1; then
        log_error "Vagrant ne fonctionne pas correctement"
        return 1
    fi

    log_success "Configuration test√©e avec succ√®s"
}

# Affichage des instructions finales
show_usage() {
    echo ""
    echo -e "${GREEN}üéâ Installation termin√©e avec succ√®s !${NC}"
    echo ""
    echo -e "${BLUE}üìñ Instructions d'utilisation :${NC}"
    echo ""
    echo -e "${YELLOW}D√©marrer le cluster K3s :${NC}"
    echo "  make up"
    echo ""
    echo -e "${YELLOW}V√©rifier l'√©tat du cluster :${NC}"
    echo "  make cluster-info"
    echo ""
    echo -e "${YELLOW}Se connecter aux machines :${NC}"
    echo "  make ssh-server    # Master node"
    echo "  make ssh-worker    # Worker node"
    echo ""
    echo -e "${YELLOW}Nettoyer compl√®tement :${NC}"
    echo "  make clean"
    echo ""
    echo -e "${YELLOW}Aide compl√®te :${NC}"
    echo "  make help"
    echo ""
    if systemd-detect-virt >/dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è  Note importante pour la virtualisation imbriqu√©e :${NC}"
        echo "Si vous rencontrez des probl√®mes, red√©marrez votre VM apr√®s l'installation."
        echo ""
    fi
}

# Fonction principale
main() {
    echo -e "${GREEN}üöÄ Installation d'Inception of Things (IoT) - Projet K3s${NC}"
    echo "================================================================"
    echo ""

    check_directory
    check_system
    install_virtualbox
    install_vagrant
    setup_nested_virtualization
    install_tools
    setup_directories
    test_configuration
    show_usage
}

# Gestion des signaux
trap 'log_error "Installation interrompue"; exit 1' INT TERM

# Ex√©cution du script principal
main "$@"
