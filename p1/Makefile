.PHONY: install up clean destroy status ssh-master ssh-worker cluster-info help deploy-p2 clean-p2 status-p2 test-p2 install-p3 setup-p3 deploy-p3 status-p3 port-forward-p3 test-p3 clean-p3 start-all stop-all

# Variables
VAGRANT_CMD = vagrant
RED = \033[0;31m
GREEN = \033[0;32m
YELLOW = \033[1;33m
BLUE = \033[0;34m
NC = \033[0m

# Installation et configuration initiale
install:
	@echo "$(GREEN)üöÄ Installation d'Inception of Things...$(NC)"
	@chmod +x install.sh
	@./install.sh

# D√©marrage du cluster K3s
up:
	@echo "$(GREEN)ÔøΩ D√©marrage du cluster K3s...$(NC)"
	@mkdir -p confs
	@chmod +x scripts/*.sh 2>/dev/null || true
	@echo "$(BLUE)üì¶ D√©marrage du master node...$(NC)"
	$(VAGRANT_CMD) up edetohS
	@echo "$(GREEN)‚úÖ Master d√©marr√© !$(NC)"
	@echo "$(BLUE)ÔøΩ D√©marrage du worker node...$(NC)"
	$(VAGRANT_CMD) up edetohSW
	@echo "$(GREEN)üéâ Cluster K3s op√©rationnel !$(NC)"
	@$(MAKE) cluster-info

# Nettoyage complet
clean:
	@echo "$(RED)üßπ Nettoyage complet...$(NC)"
	@$(MAKE) clean-p2 || true
	@$(MAKE) clean-p3 || true
	-$(VAGRANT_CMD) destroy -f
	@echo "$(YELLOW)üìÅ Suppression des fichiers temporaires...$(NC)"
	-rm -f confs/node-token confs/k3s.yaml
	-rm -rf .vagrant
	@echo "$(GREEN)‚úÖ Nettoyage termin√© (P1, P2, P3)!$(NC)"

# Arr√™t complet (toutes les parties)
stop-all:
	@echo "$(RED)üõë Arr√™t de toutes les parties...$(NC)"
	@$(MAKE) clean
	@echo "$(GREEN)‚úÖ Tout arr√™t√© et nettoy√© !$(NC)"

# D√©marrage complet (toutes les parties)
start-all:
	@echo "$(GREEN)üöÄ D√©marrage complet de toutes les parties...$(NC)"
	@$(MAKE) up
	@$(MAKE) deploy-p2
	@$(MAKE) deploy-p3-full
	@echo "$(GREEN)üéâ Toutes les parties sont d√©marr√©es !$(NC)"
	@echo "$(BLUE)üåê P1/P2: http://app1.com, http://app2.com, http://192.168.56.110$(NC)"
	@echo "$(BLUE)üåê P3: ArgoCD http://localhost:8080$(NC)"
	@echo ""
	@echo "$(YELLOW)üß™ Lancement du test P3 (port-forward wil-playground)...$(NC)"
	@$(MAKE) test-p3


# Destruction des VMs uniquement
destroy:
	@echo "$(RED)üõë Destruction des VMs...$(NC)"
	$(VAGRANT_CMD) destroy -f

# Statut des machines
status:
	@echo "$(BLUE)üìä Statut des machines :$(NC)"
	$(VAGRANT_CMD) status

# SSH vers le master
ssh-master:
	@echo "$(GREEN)üîë Connexion SSH vers le master...$(NC)"
	$(VAGRANT_CMD) ssh edetohS

# SSH vers le worker
ssh-worker:
	@echo "$(GREEN)üîë Connexion SSH vers le worker...$(NC)"
	$(VAGRANT_CMD) ssh edetohSW

# Informations sur le cluster
cluster-info:
	@echo "$(BLUE)üîç Informations sur le cluster K3s :$(NC)"
	@echo "$(YELLOW)=== N≈ìuds du cluster ===$(NC)"
	-$(VAGRANT_CMD) ssh edetohS -c "sudo k3s kubectl get nodes -o wide" 2>/dev/null || echo "$(RED)‚ùå Cluster non accessible$(NC)"
	@echo ""
	@echo "$(YELLOW)=== Pods syst√®me ===$(NC)"
	-$(VAGRANT_CMD) ssh edetohS -c "sudo k3s kubectl get pods -A" 2>/dev/null || echo "$(RED)‚ùå Impossible de r√©cup√©rer les pods$(NC)"

# D√©ployer P2 sur ce cluster
deploy-p2:
	@echo "$(GREEN)üöÄ D√©ploiement des applications P2 sur ce cluster K3s$(NC)"
	@if [ ! -f confs/k3s.yaml ]; then \
		echo "$(RED)‚ùå Cluster K3s non d√©marr√©$(NC)"; \
		echo "$(YELLOW)   D√©marrez le cluster d'abord: make up$(NC)"; \
		exit 1; \
	fi
	@echo "$(BLUE)‚ÑπÔ∏è  Correction de l'adresse du serveur dans kubeconfig...$(NC)"
	@sed -i 's|server: https://127.0.0.1:6443|server: https://192.168.56.110:6443|g' confs/k3s.yaml
	@echo "$(BLUE)‚ÑπÔ∏è  V√©rification de la connectivit√©...$(NC)"
	@if ! nc -z 192.168.56.110 6443 2>/dev/null; then \
		echo "$(RED)‚ùå Cluster non accessible$(NC)"; \
		exit 1; \
	fi
	@echo "$(BLUE)üì¶ D√©ploiement de app1...$(NC)"
	@export KUBECONFIG=confs/k3s.yaml && kubectl apply -f ../p2/confs/app1-deployment.yaml --validate=false
	@export KUBECONFIG=confs/k3s.yaml && kubectl rollout status deployment/app1-deployment --timeout=120s
	@echo "$(BLUE)üì¶ D√©ploiement de app2...$(NC)"
	@export KUBECONFIG=confs/k3s.yaml && kubectl apply -f ../p2/confs/app2-deployment.yaml --validate=false
	@export KUBECONFIG=confs/k3s.yaml && kubectl rollout status deployment/app2-deployment --timeout=120s
	@echo "$(BLUE)üì¶ D√©ploiement de app3...$(NC)"
	@export KUBECONFIG=confs/k3s.yaml && kubectl apply -f ../p2/confs/app3-deployment.yaml --validate=false
	@export KUBECONFIG=confs/k3s.yaml && kubectl rollout status deployment/app3-deployment --timeout=120s
	@echo "$(BLUE)üåê Configuration de l'Ingress...$(NC)"
	@export KUBECONFIG=confs/k3s.yaml && kubectl apply -f ../p2/confs/ingress.yaml --validate=false
	@echo "$(GREEN)‚úÖ Applications P2 d√©ploy√©es avec succ√®s!$(NC)"
	@echo ""
	@echo "$(BLUE)üåê Applications accessibles via:$(NC)"
	@echo "  ‚Ä¢ http://app1.com (ajoutez '192.168.56.110 app1.com' √† /etc/hosts)"
	@echo "  ‚Ä¢ http://app2.com (ajoutez '192.168.56.110 app2.com' √† /etc/hosts)"
	@echo "  ‚Ä¢ http://192.168.56.110 (app3 par d√©faut)"

# Supprimer les applications P2
clean-p2:
	@echo "$(YELLOW)üßπ Suppression des applications P2$(NC)"
	@if [ -f confs/k3s.yaml ]; then \
		export KUBECONFIG=confs/k3s.yaml && \
		kubectl delete -f ../p2/confs/ingress.yaml --ignore-not-found=true && \
		kubectl delete -f ../p2/confs/app1-deployment.yaml --ignore-not-found=true && \
		kubectl delete -f ../p2/confs/app2-deployment.yaml --ignore-not-found=true && \
		kubectl delete -f ../p2/confs/app3-deployment.yaml --ignore-not-found=true; \
		echo "$(GREEN)‚úÖ Applications P2 supprim√©es$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Cluster non accessible$(NC)"; \
	fi

# Statut des applications P2
status-p2:
	@echo "$(BLUE)üìä Statut des applications P2$(NC)"
	@if [ -f confs/k3s.yaml ]; then \
		export KUBECONFIG=confs/k3s.yaml && \
		echo "$(YELLOW)=== Pods P2 ===$(NC)" && \
		kubectl get pods -l 'app in (app1,app2,app3)' -o wide 2>/dev/null || echo "$(RED)‚ùå Aucun pod P2$(NC)"; \
		echo "" && \
		echo "$(YELLOW)=== Services P2 ===$(NC)" && \
		kubectl get services -l 'app in (app1,app2,app3)' 2>/dev/null || echo "$(RED)‚ùå Aucun service P2$(NC)"; \
		echo "" && \
		echo "$(YELLOW)=== Ingress P2 ===$(NC)" && \
		kubectl get ingress 2>/dev/null || echo "$(RED)‚ùå Aucun ingress$(NC)"; \
	else \
		echo "$(RED)‚ùå Cluster non accessible$(NC)"; \
	fi

# Test des applications P2
test-p2:
	@echo "$(BLUE)üß™ Test des applications P2$(NC)"
	@echo "$(YELLOW)Ajout des entr√©es /etc/hosts si n√©cessaire...$(NC)"
	@if ! grep -q "192.168.56.110 app1.com" /etc/hosts; then \
		echo "echo '192.168.56.110 app1.com' | sudo tee -a /etc/hosts"; \
	fi
	@if ! grep -q "192.168.56.110 app2.com" /etc/hosts; then \
		echo "echo '192.168.56.110 app2.com' | sudo tee -a /etc/hosts"; \
	fi
	@echo ""
	@echo "$(BLUE)Test app1:$(NC)"
	@curl -s -w "HTTP %{http_code}\n" http://app1.com -o /dev/null || echo "‚ùå app1 non accessible"
	@echo "$(BLUE)Test app2:$(NC)"
	@curl -s -w "HTTP %{http_code}\n" http://app2.com -o /dev/null || echo "‚ùå app2 non accessible"
	@echo "$(BLUE)Test app3:$(NC)"
	@curl -s -w "HTTP %{http_code}\n" http://192.168.56.110 -o /dev/null || echo "‚ùå app3 non accessible"

# Installer l'environnement P3 (K3d)
install-p3:
	@echo "$(GREEN)üöÄ Installation de l'environnement P3 (K3d + ArgoCD)$(NC)"
	@cd ../p3 && chmod +x run.sh && ./run.sh install
	@echo "$(GREEN)‚úÖ Environnement P3 install√© !$(NC)"
	@echo "$(YELLOW)‚ö†Ô∏è  Reconnectez-vous √† votre session pour utiliser Docker$(NC)"

# Configurer ArgoCD
setup-p3:
	@echo "$(GREEN)üîß Configuration d'ArgoCD...$(NC)"
	@cd ../p3 && ./run.sh setup
	@echo "$(GREEN)‚úÖ ArgoCD configur√© !$(NC)"

# D√©ployer l'application wil-playground
deploy-p3:
	@echo "$(GREEN)üì¶ D√©ploiement de l'application wil-playground...$(NC)"
	@cd ../p3 && ./run.sh deploy
	@echo "$(GREEN)‚úÖ Application P3 d√©ploy√©e !$(NC)"

# Statut de P3
status-p3:
	@echo "$(BLUE)üìä Statut de la partie 3 (ArgoCD)$(NC)"
	@cd ../p3 && ./run.sh status

# Lancer le port-forward pour ArgoCD
port-forward-p3:
	@echo "$(BLUE)üåê Lancement du port-forward ArgoCD...$(NC)"
	@echo "$(YELLOW)ArgoCD sera accessible sur: http://localhost:8080$(NC)"
	@echo "$(YELLOW)Mot de passe admin: $(NC)"
	@kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" 2>/dev/null | base64 -d && echo
	@echo ""
	@kubectl port-forward -n argocd pod/$$(kubectl get pods -n argocd -l app.kubernetes.io/name=argocd-server -o jsonpath='{.items[0].metadata.name}') 8080:8080

# Test de l'application P3
test-p3:
	@echo "$(BLUE)üß™ Test de l'application P3$(NC)"
	@cd ../p3 && chmod +x test-app.sh && ./test-app.sh test

# Nettoyage P3
clean-p3:
	@echo "$(YELLOW)üßπ Nettoyage de P3 (suppression du cluster K3d)$(NC)"
	@cd ../p3 && ./run.sh clean
	@echo "$(GREEN)‚úÖ P3 nettoy√© !$(NC)"

# D√©ploiement P3 complet (install + setup + deploy)
deploy-p3-full: install-p3 setup-p3 deploy-p3
	@echo "$(GREEN)üéâ P3 d√©ploy√© compl√®tement !$(NC)"
	@echo "$(BLUE)üåê ArgoCD: http://localhost:8080 | App: make test-p3$(NC)"

# Aide
help:
	@echo "$(BLUE)üìñ Inception of Things - Guide d'utilisation$(NC)"
	@echo ""
	@echo "$(GREEN)üèóÔ∏è  Commandes P1 (Cluster K3s) :$(NC)"
	@echo "  $(YELLOW)make install$(NC)      - Installer les d√©pendances"
	@echo "  $(YELLOW)make up$(NC)           - D√©marrer le cluster K3s"
	@echo "  $(YELLOW)make clean$(NC)        - Nettoyer tout (P1+P2+P3)"
	@echo "  $(YELLOW)make destroy$(NC)      - D√©truire les VMs uniquement"
	@echo ""
	@echo "$(GREEN)üì¶ Commandes P2 (Applications) :$(NC)"
	@echo "  $(YELLOW)make deploy-p2$(NC)    - D√©ployer les applications P2"
	@echo "  $(YELLOW)make clean-p2$(NC)     - Supprimer les applications P2"
	@echo "  $(YELLOW)make status-p2$(NC)    - Statut des applications P2"
	@echo "  $(YELLOW)make test-p2$(NC)      - Tester les applications P2"
	@echo ""
	@echo "$(GREEN)üöÄ Commandes P3 (ArgoCD) :$(NC)"
	@echo "  $(YELLOW)make install-p3$(NC)   - Installer l'environnement P3 (K3d)"
	@echo "  $(YELLOW)make setup-p3$(NC)     - Configurer ArgoCD"
	@echo "  $(YELLOW)make deploy-p3$(NC)    - D√©ployer l'application wil-playground"
	@echo "  $(YELLOW)make status-p3$(NC)    - Statut de P3"
	@echo "  $(YELLOW)make port-forward-p3$(NC) - Lancer le port-forward ArgoCD"
	@echo "  $(YELLOW)make test-p3$(NC)      - Tester l'application P3"
	@echo "  $(YELLOW)make clean-p3$(NC)     - Nettoyer P3 (supprimer le cluster K3d)"
	@echo ""
	@echo "$(GREEN)üöÄ Commandes principales :$(NC)"
	@echo "  $(YELLOW)make start-all$(NC)   - D√©marrer toutes les parties (P1+P2+P3) + test P3"
	@echo "  $(YELLOW)make stop-all$(NC)    - Arr√™ter et nettoyer tout"
	@echo "  $(YELLOW)make deploy-p3-full$(NC) - P3 complet uniquement"
	@echo ""
	@echo "$(GREEN)‚ÑπÔ∏è  Commandes d'information :$(NC)"
	@echo "  $(YELLOW)make status$(NC)       - Statut des VMs P1"
	@echo "  $(YELLOW)make cluster-info$(NC) - Informations cluster K3s"
	@echo "  $(YELLOW)make ssh-master$(NC)   - SSH vers le master"
	@echo "  $(YELLOW)make ssh-worker$(NC)   - SSH vers le worker"
	@echo ""
	@echo "$(BLUE)üéØ Workflows recommand√©s :$(NC)"
	@echo ""
	@echo "$(YELLOW)üåü D√©marrage rapide :$(NC)"
	@echo "  1. $(YELLOW)make install$(NC)     # Installation initiale"
	@echo "  2. $(YELLOW)make start-all$(NC)   # Tout d√©marrer + test P3"
	@echo "  3. $(YELLOW)make test-p2$(NC)     # Tester P2"
	@echo "     $(BLUE)‚Üí P3 d√©j√† test√© automatiquement$(NC)"
	@echo ""
	@echo "$(YELLOW)ÔøΩ Nettoyage :$(NC)"
	@echo "  ‚Ä¢ $(YELLOW)make stop-all$(NC)     # Tout arr√™ter et nettoyer"
	@echo "  ‚Ä¢ $(YELLOW)make clean-p2$(NC)     # Nettoyer P2 uniquement"
	@echo "  ‚Ä¢ $(YELLOW)make clean-p3$(NC)     # Nettoyer P3 uniquement"
	@echo ""
	@echo "$(GREEN)üåê Applications d√©ploy√©es :$(NC)"
	@echo "  ‚Ä¢ P2: http://app1.com, http://app2.com, http://192.168.56.110"
	@echo "  ‚Ä¢ P3: ArgoCD http://localhost:8080, wil-playground http://localhost:8889"
