.PHONY: install up clean destroy status ssh-master ssh-worker cluster-info help start-p1 stop-p1 test-p1 clean-vbox

# Variables P1
VAGRANT_CMD = vagrant
VB_CMD = VBoxManage
HOST_IP = 192.168.56.110
VM_MASTER_NAME = edetohS
VM_WORKER_NAME = edetohSW

# Couleurs
RED = \033[0;31m
GREEN = \033[0;32m
YELLOW = \033[1;33m
BLUE = \033[0;34m
NC = \033[0m

# Installation et configuration initiale
install:
	@echo "$(GREEN)üöÄ Installation d'Inception of Things...$(NC)"
	@chmod +x install.sh
	@cd .. && ./scripts/install.sh

up:
	@echo "$(GREEN)üöÄ D√©marrage du cluster K3s...$(NC)"
	@mkdir -p ../confs
	@chmod +x *.sh 2>/dev/null || true
	@$(MAKE) clean-vbox
	@echo "$(BLUE)üì¶ D√©marrage du master node...$(NC)"
	@cd .. && $(VAGRANT_CMD) up edetohS
	@echo "$(GREEN)‚úÖ Master d√©marr√© !$(NC)"
	@echo "$(BLUE)üöÄ D√©marrage du worker node...$(NC)"
	@cd .. && $(VAGRANT_CMD) up edetohSW
	@echo "$(GREEN)üéâ Cluster K3s op√©rationnel !$(NC)"
	@$(MAKE) cluster-info

# Nettoyage complet P1
clean:
	@echo "$(RED)üßπ Nettoyage de la partie 1...$(NC)"
	@cd .. && $(VAGRANT_CMD) destroy -f || true
	@$(MAKE) clean-vbox
	@echo "$(YELLOW)üìÅ Suppression des fichiers temporaires P1...$(NC)"
	@rm -f ../confs/node-token ../confs/k3s.yaml
	@rm -rf ../.vagrant
	@echo "$(GREEN)‚úÖ Nettoyage P1 termin√© !$(NC)"

# ===============================
# Commandes principales P1
# ===============================

# D√©marrage P1
start-p1:
	@echo "$(GREEN)üöÄ D√©marrage de la partie 1 (Cluster K3s)...$(NC)"
	@$(MAKE) up
	@echo "$(GREEN)‚úÖ Partie 1 d√©marr√©e avec succ√®s !$(NC)"
	@$(MAKE) test-p1

# Arr√™t P1
stop-p1:
	@echo "$(RED)üõë Arr√™t de la partie 1...$(NC)"
	@cd .. && $(VAGRANT_CMD) destroy -f || true
	@$(MAKE) clean-vbox
	@rm -f ../confs/node-token ../confs/k3s.yaml
	@rm -rf ../.vagrant
	@echo "$(GREEN)‚úÖ Partie 1 arr√™t√©e et nettoy√©e !$(NC)"

# Test P1
test-p1:
	@echo "$(BLUE)üß™ Test de la partie 1 (Cluster K3s)$(NC)"
	@echo "$(YELLOW)=== Test de connectivit√© des n≈ìuds ===$(NC)"
	@if cd .. && $(VAGRANT_CMD) ssh edetohS -c "sudo k3s kubectl get nodes" 2>/dev/null | grep -q "Ready"; then \
		echo "$(GREEN)‚úÖ Cluster K3s op√©rationnel$(NC)"; \
	else \
		echo "$(RED)‚ùå Cluster K3s non fonctionnel$(NC)"; \
		exit 1; \
	fi
	@echo ""
	@echo "$(YELLOW)=== Test des n≈ìuds ===$(NC)"
	@cd .. && $(VAGRANT_CMD) ssh edetohS -c "sudo k3s kubectl get nodes -o wide" 2>/dev/null || echo "$(RED)‚ùå Impossible de r√©cup√©rer les n≈ìuds$(NC)"
	@echo ""
	@echo "$(YELLOW)=== Test des pods syst√®me ===$(NC)"
	@cd .. && $(VAGRANT_CMD) ssh edetohS -c "sudo k3s kubectl get pods -n kube-system" 2>/dev/null || echo "$(RED)‚ùå Impossible de r√©cup√©rer les pods$(NC)"
	@echo ""
	@echo "$(YELLOW)=== V√©rification des IPs ===$(NC)"
	@echo "$(BLUE)Server (edetohS):$(NC)"
	@cd .. && $(VAGRANT_CMD) ssh edetohS -c "ip addr show eth1 | grep 'inet '" 2>/dev/null || echo "$(RED)‚ùå IP Server introuvable$(NC)"
	@echo "$(BLUE)Worker (edetohSW):$(NC)"
	@cd .. && $(VAGRANT_CMD) ssh edetohSW -c "ip addr show eth1 | grep 'inet '" 2>/dev/null || echo "$(RED)‚ùå IP Worker introuvable$(NC)"
	@echo ""
	@echo "$(GREEN)üéâ Tests P1 termin√©s !$(NC)"

# Destruction des VMs uniquement
destroy:
	@echo "$(RED)üõë Destruction des VMs...$(NC)"
	@cd .. && $(VAGRANT_CMD) destroy -f
	@$(MAKE) clean-vbox

# Statut des machines
status:
	@echo "$(BLUE)üìä Statut des machines :$(NC)"
	@cd .. && $(VAGRANT_CMD) status

# SSH vers le master
ssh-master:
	@echo "$(GREEN)üîë Connexion SSH vers le master...$(NC)"
	@cd .. && $(VAGRANT_CMD) ssh edetohS

# SSH vers le worker
ssh-worker:
	@echo "$(GREEN)üîë Connexion SSH vers le worker...$(NC)"
	@cd .. && $(VAGRANT_CMD) ssh edetohSW

# Informations sur le cluster
cluster-info:
	@echo "$(BLUE)üîç Informations sur le cluster K3s :$(NC)"
	@echo "$(YELLOW)=== N≈ìuds du cluster ===$(NC)"
	@cd .. && $(VAGRANT_CMD) ssh edetohS -c "sudo k3s kubectl get nodes -o wide" 2>/dev/null || echo "$(RED)‚ùå Cluster non accessible$(NC)"
	@echo ""
	@echo "$(YELLOW)=== Pods syst√®me ===$(NC)"
	@cd .. && $(VAGRANT_CMD) ssh edetohS -c "sudo k3s kubectl get pods -A" 2>/dev/null || echo "$(RED)‚ùå Impossible de r√©cup√©rer les pods$(NC)"

# Nettoyage des VMs VirtualBox r√©siduelles
clean-vbox:
	@if command -v $(VB_CMD) >/dev/null 2>&1; then \
		for vm in $(VM_MASTER_NAME) $(VM_WORKER_NAME); do \
			if $(VB_CMD) list vms | grep -q "\"$${vm}\""; then \
				echo "$(YELLOW)‚ö†Ô∏è  Suppression de la VM r√©siduelle $${vm}...$(NC)"; \
				$(VB_CMD) controlvm "$${vm}" poweroff 2>/dev/null || true; \
				$(VB_CMD) unregistervm "$${vm}" --delete >/dev/null 2>&1 || true; \
			fi; \
		done; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  VBoxManage non disponible, saut du nettoyage VirtualBox$(NC)"; \
	fi

# Aide P1
help:
	@echo "$(BLUE)üìñ Inception of Things - Partie 1$(NC)"
	@echo ""
	@echo "$(GREEN)üöÄ Commandes principales :$(NC)"
	@echo "  $(YELLOW)make install$(NC)      - Installer les d√©pendances"
	@echo "  $(YELLOW)make start-p1$(NC)     - D√©marrer P1 (cluster K3s + test)"
	@echo "  $(YELLOW)make stop-p1$(NC)      - Arr√™ter et nettoyer P1"
	@echo "  $(YELLOW)make test-p1$(NC)      - Tester P1 (cluster + n≈ìuds)"
	@echo ""
	@echo "$(GREEN)ÔøΩ Commandes utilitaires :$(NC)"
	@echo "  $(YELLOW)make up$(NC)           - D√©marrer le cluster K3s"
	@echo "  $(YELLOW)make clean$(NC)        - Nettoyer P1"
	@echo "  $(YELLOW)make destroy$(NC)      - D√©truire les VMs uniquement"
	@echo "  $(YELLOW)make status$(NC)       - Statut des VMs"
	@echo "  $(YELLOW)make cluster-info$(NC) - Informations cluster K3s"
	@echo "  $(YELLOW)make ssh-master$(NC)   - SSH vers le master (edetohS)"
	@echo "  $(YELLOW)make ssh-worker$(NC)   - SSH vers le worker (edetohSW)"
	@echo ""
	@echo "$(GREEN)üéØ Workflow recommand√© :$(NC)"
	@echo "  1. $(YELLOW)make install$(NC)     # Installation initiale"
	@echo "  2. $(YELLOW)make start-p1$(NC)    # D√©marrer et tester P1"
	@echo "  3. $(YELLOW)make stop-p1$(NC)     # Arr√™ter P1"
	@echo ""
	@echo "$(GREEN)ÔøΩÔ∏è Architecture P1 :$(NC)"
	@echo "  ‚Ä¢ Master (edetohS): 192.168.56.110 - K3s server"
	@echo "  ‚Ä¢ Worker (edetohSW): 192.168.56.111 - K3s agent"
	@echo "  ‚Ä¢ Interface: eth1 (host-only network)"
	@echo ""
	@echo "$(BLUE)üí° Autres parties :$(NC)"
	@echo "  ‚Ä¢ P2: cd ../p2 && make help"
	@echo "  ‚Ä¢ P3: cd ../p3 && make help"
